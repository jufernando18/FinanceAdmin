application {
  config {
    databaseType sql
    devDatabaseType h2Disk
    enableHibernateCache false
    enableSwaggerCodegen true
    enableTranslation true
    jhiPrefix jhi
    languages [en, es]
    messageBroker kafka
    nativeLanguage en
    packageName com.jferza.financeadmin
    prodDatabaseType mysql
    searchEngine false
    serviceDiscoveryType eureka
    skipClient false
    skipServer false
    testFrameworks []
    websocket false
    jhipsterVersion "6.7.1"
    applicationType monolith
    baseName FinanceAdmin
    serverPort 8080
    authenticationType jwt
    cacheProvider ehcache
    buildTool maven
    jwtSecretKey "ZWNlMDcxY2ZhOWQyZDUyNzhmODg0ZTMwODkxYjQ5NDg5MzRmOGZhNTBlNDRjMTU0NjUzOGE0YjhkMmQwYjM2NzdiZDViNTNiODdjYjRlMzRiNTc2MzRhOGZkZDljMjA4N2Y0ZGIxMWJmZTRhM2VhYjJlMTNkNTY5ZDkxNjBiY2I="
    embeddableLaunchScript false
    useSass true
    clientPackageManager npm
    clientFramework angularX
    clientTheme none
    creationTimestamp 1583039902974
    dtoSuffix DTO
    otherModules []
    skipUserManagement false
  }

  entities UserRegistry, AccountT, Transaction, Audit
}

entity UserRegistry {
    name String,
    username String required unique minlength(5),
    password String required minlength(5),
    title String,
    token String required unique,
    session Boolean required,
	audit Long
}

entity AccountT {
    name String required unique,
    description String,
    code Integer unique,
    increaseWhen TransactionType,
    decreaseWhen TransactionType,
    balance Integer required,
	audit Long  
}

entity Transaction {
    concept String,
    accountT Long,
    type TransactionType,
    value Integer,
    date ZonedDateTime,
    balance Integer,
	audit Long required
}

entity AuditRegistry {
    state State required,
    createdBy Long required,
    createdDate ZonedDateTime required,
    lastModifiedBy Long,
    lastModifiedDate ZonedDateTime
}

enum TransactionType {
	DEBIT, CREDIT
}

enum State {
	ADDED, MODIFIED, DELETED, ACTIVE
}

relationship ManyToOne {
    Transaction{accountT} to AccountT,
	Audit{createdBy} to UserRegistry,
    Audit{lastModifiedBy} to UserRegistry    
}

relationship OneToOne {
	UserRegistry{audit} to AuditRegistry,
    AccountT{audit} to AuditRegistry,
    Transaction{audit} to AuditRegistry
}

dto UserRegistry, AccountT, Transaction, Audit with mapstruct
paginate UserRegistry, AccountT, Transaction, Audit with pagination
service UserRegistry, AccountT, Transaction, Audit with serviceImpl
